
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/rnstripe/Props.h>
#include <folly/dynamic.h>
#include <react/renderer/components/image/conversions.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

AddressSheetViewProps::AddressSheetViewProps(
    const PropsParserContext &context,
    const AddressSheetViewProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    visible(convertRawProp(context, rawProps, "visible", sourceProps.visible, {false})),
    presentationStyle(convertRawProp(context, rawProps, "presentationStyle", sourceProps.presentationStyle, {"popover"})),
    animationStyle(convertRawProp(context, rawProps, "animationStyle", sourceProps.animationStyle, {"slide"})),
    appearance(convertRawProp(context, rawProps, "appearance", sourceProps.appearance, {})),
    defaultValues(convertRawProp(context, rawProps, "defaultValues", sourceProps.defaultValues, {})),
    additionalFields(convertRawProp(context, rawProps, "additionalFields", sourceProps.additionalFields, {})),
    allowedCountries(convertRawProp(context, rawProps, "allowedCountries", sourceProps.allowedCountries, {})),
    autocompleteCountries(convertRawProp(context, rawProps, "autocompleteCountries", sourceProps.autocompleteCountries, {})),
    primaryButtonTitle(convertRawProp(context, rawProps, "primaryButtonTitle", sourceProps.primaryButtonTitle, {})),
    sheetTitle(convertRawProp(context, rawProps, "sheetTitle", sourceProps.sheetTitle, {})),
    googlePlacesApiKey(convertRawProp(context, rawProps, "googlePlacesApiKey", sourceProps.googlePlacesApiKey, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName AddressSheetViewProps::getDiffPropsImplementationTarget() const {
  return "AddressSheetView";
}

folly::dynamic AddressSheetViewProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = AddressSheetViewProps();
  const AddressSheetViewProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const AddressSheetViewProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (visible != oldProps->visible) {
    result["visible"] = visible;
  }
    
  if (presentationStyle != oldProps->presentationStyle) {
    result["presentationStyle"] = presentationStyle;
  }
    
  if (animationStyle != oldProps->animationStyle) {
    result["animationStyle"] = animationStyle;
  }
    
  if (appearance != oldProps->appearance) {
    result["appearance"] = appearance;
  }
    
  if (defaultValues != oldProps->defaultValues) {
    result["defaultValues"] = defaultValues;
  }
    
  if (additionalFields != oldProps->additionalFields) {
    result["additionalFields"] = additionalFields;
  }
    
  if (allowedCountries != oldProps->allowedCountries) {
    result["allowedCountries"] = toDynamic(allowedCountries);
  }
    
  if (autocompleteCountries != oldProps->autocompleteCountries) {
    result["autocompleteCountries"] = toDynamic(autocompleteCountries);
  }
    
  if (primaryButtonTitle != oldProps->primaryButtonTitle) {
    result["primaryButtonTitle"] = primaryButtonTitle;
  }
    
  if (sheetTitle != oldProps->sheetTitle) {
    result["sheetTitle"] = sheetTitle;
  }
    
  if (googlePlacesApiKey != oldProps->googlePlacesApiKey) {
    result["googlePlacesApiKey"] = googlePlacesApiKey;
  }
  return result;
}
#endif
AddToWalletButtonProps::AddToWalletButtonProps(
    const PropsParserContext &context,
    const AddToWalletButtonProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    iOSButtonStyle(convertRawProp(context, rawProps, "iOSButtonStyle", sourceProps.iOSButtonStyle, {"onDarkBackground"})),
    androidAssetSource(convertRawProp(context, rawProps, "androidAssetSource", sourceProps.androidAssetSource, {})),
    testEnv(convertRawProp(context, rawProps, "testEnv", sourceProps.testEnv, {false})),
    cardDetails(convertRawProp(context, rawProps, "cardDetails", sourceProps.cardDetails, {})),
    token(convertRawProp(context, rawProps, "token", sourceProps.token, {})),
    ephemeralKey(convertRawProp(context, rawProps, "ephemeralKey", sourceProps.ephemeralKey, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName AddToWalletButtonProps::getDiffPropsImplementationTarget() const {
  return "AddToWalletButton";
}

folly::dynamic AddToWalletButtonProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = AddToWalletButtonProps();
  const AddToWalletButtonProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const AddToWalletButtonProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (iOSButtonStyle != oldProps->iOSButtonStyle) {
    result["iOSButtonStyle"] = iOSButtonStyle;
  }
    
  if (androidAssetSource != oldProps->androidAssetSource) {
    result["androidAssetSource"] = toDynamic(androidAssetSource);
  }
    
  if (testEnv != oldProps->testEnv) {
    result["testEnv"] = testEnv;
  }
    
  if (cardDetails != oldProps->cardDetails) {
    result["cardDetails"] = cardDetails;
  }
    
  if (token != oldProps->token) {
    result["token"] = token;
  }
    
  if (ephemeralKey != oldProps->ephemeralKey) {
    result["ephemeralKey"] = ephemeralKey;
  }
  return result;
}
#endif
ApplePayButtonProps::ApplePayButtonProps(
    const PropsParserContext &context,
    const ApplePayButtonProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    disabled(convertRawProp(context, rawProps, "disabled", sourceProps.disabled, {false})),
    type(convertRawProp(context, rawProps, "type", sourceProps.type, {0})),
    buttonStyle(convertRawProp(context, rawProps, "buttonStyle", sourceProps.buttonStyle, {0})),
    borderRadius(convertRawProp(context, rawProps, "borderRadius", sourceProps.borderRadius, {4})),
    hasShippingMethodCallback(convertRawProp(context, rawProps, "hasShippingMethodCallback", sourceProps.hasShippingMethodCallback, {false})),
    hasShippingContactCallback(convertRawProp(context, rawProps, "hasShippingContactCallback", sourceProps.hasShippingContactCallback, {false})),
    hasCouponCodeCallback(convertRawProp(context, rawProps, "hasCouponCodeCallback", sourceProps.hasCouponCodeCallback, {false})),
    hasOrderTrackingCallback(convertRawProp(context, rawProps, "hasOrderTrackingCallback", sourceProps.hasOrderTrackingCallback, {false})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName ApplePayButtonProps::getDiffPropsImplementationTarget() const {
  return "ApplePayButton";
}

folly::dynamic ApplePayButtonProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = ApplePayButtonProps();
  const ApplePayButtonProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const ApplePayButtonProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (disabled != oldProps->disabled) {
    result["disabled"] = disabled;
  }
    
  if (type != oldProps->type) {
    result["type"] = type;
  }
    
  if (buttonStyle != oldProps->buttonStyle) {
    result["buttonStyle"] = buttonStyle;
  }
    
  if (borderRadius != oldProps->borderRadius) {
    result["borderRadius"] = borderRadius;
  }
    
  if (hasShippingMethodCallback != oldProps->hasShippingMethodCallback) {
    result["hasShippingMethodCallback"] = hasShippingMethodCallback;
  }
    
  if (hasShippingContactCallback != oldProps->hasShippingContactCallback) {
    result["hasShippingContactCallback"] = hasShippingContactCallback;
  }
    
  if (hasCouponCodeCallback != oldProps->hasCouponCodeCallback) {
    result["hasCouponCodeCallback"] = hasCouponCodeCallback;
  }
    
  if (hasOrderTrackingCallback != oldProps->hasOrderTrackingCallback) {
    result["hasOrderTrackingCallback"] = hasOrderTrackingCallback;
  }
  return result;
}
#endif
AuBECSDebitFormProps::AuBECSDebitFormProps(
    const PropsParserContext &context,
    const AuBECSDebitFormProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    companyName(convertRawProp(context, rawProps, "companyName", sourceProps.companyName, {})),
    formStyle(convertRawProp(context, rawProps, "formStyle", sourceProps.formStyle, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName AuBECSDebitFormProps::getDiffPropsImplementationTarget() const {
  return "AuBECSDebitForm";
}

folly::dynamic AuBECSDebitFormProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = AuBECSDebitFormProps();
  const AuBECSDebitFormProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const AuBECSDebitFormProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (companyName != oldProps->companyName) {
    result["companyName"] = companyName;
  }
    
  if (formStyle != oldProps->formStyle) {
    result["formStyle"] = formStyle;
  }
  return result;
}
#endif
CardFieldProps::CardFieldProps(
    const PropsParserContext &context,
    const CardFieldProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    autofocus(convertRawProp(context, rawProps, "autofocus", sourceProps.autofocus, {false})),
    cardStyle(convertRawProp(context, rawProps, "cardStyle", sourceProps.cardStyle, {})),
    countryCode(convertRawProp(context, rawProps, "countryCode", sourceProps.countryCode, {})),
    dangerouslyGetFullCardDetails(convertRawProp(context, rawProps, "dangerouslyGetFullCardDetails", sourceProps.dangerouslyGetFullCardDetails, {false})),
    disabled(convertRawProp(context, rawProps, "disabled", sourceProps.disabled, {false})),
    onBehalfOf(convertRawProp(context, rawProps, "onBehalfOf", sourceProps.onBehalfOf, {})),
    placeholders(convertRawProp(context, rawProps, "placeholders", sourceProps.placeholders, {})),
    postalCodeEnabled(convertRawProp(context, rawProps, "postalCodeEnabled", sourceProps.postalCodeEnabled, {false})),
    preferredNetworks(convertRawProp(context, rawProps, "preferredNetworks", sourceProps.preferredNetworks, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName CardFieldProps::getDiffPropsImplementationTarget() const {
  return "CardField";
}

folly::dynamic CardFieldProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = CardFieldProps();
  const CardFieldProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const CardFieldProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (autofocus != oldProps->autofocus) {
    result["autofocus"] = autofocus;
  }
    
  if (cardStyle != oldProps->cardStyle) {
    result["cardStyle"] = cardStyle;
  }
    
  if (countryCode != oldProps->countryCode) {
    result["countryCode"] = countryCode;
  }
    
  if (dangerouslyGetFullCardDetails != oldProps->dangerouslyGetFullCardDetails) {
    result["dangerouslyGetFullCardDetails"] = dangerouslyGetFullCardDetails;
  }
    
  if (disabled != oldProps->disabled) {
    result["disabled"] = disabled;
  }
    
  if (onBehalfOf != oldProps->onBehalfOf) {
    result["onBehalfOf"] = onBehalfOf;
  }
    
  if (placeholders != oldProps->placeholders) {
    result["placeholders"] = placeholders;
  }
    
  if (postalCodeEnabled != oldProps->postalCodeEnabled) {
    result["postalCodeEnabled"] = postalCodeEnabled;
  }
    
  if (preferredNetworks != oldProps->preferredNetworks) {
    result["preferredNetworks"] = toDynamic(preferredNetworks);
  }
  return result;
}
#endif
CardFormProps::CardFormProps(
    const PropsParserContext &context,
    const CardFormProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    autofocus(convertRawProp(context, rawProps, "autofocus", sourceProps.autofocus, {false})),
    cardStyle(convertRawProp(context, rawProps, "cardStyle", sourceProps.cardStyle, {})),
    dangerouslyGetFullCardDetails(convertRawProp(context, rawProps, "dangerouslyGetFullCardDetails", sourceProps.dangerouslyGetFullCardDetails, {false})),
    defaultValues(convertRawProp(context, rawProps, "defaultValues", sourceProps.defaultValues, {})),
    disabled(convertRawProp(context, rawProps, "disabled", sourceProps.disabled, {false})),
    placeholders(convertRawProp(context, rawProps, "placeholders", sourceProps.placeholders, {})),
    postalCodeEnabled(convertRawProp(context, rawProps, "postalCodeEnabled", sourceProps.postalCodeEnabled, {false})),
    preferredNetworks(convertRawProp(context, rawProps, "preferredNetworks", sourceProps.preferredNetworks, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName CardFormProps::getDiffPropsImplementationTarget() const {
  return "CardForm";
}

folly::dynamic CardFormProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = CardFormProps();
  const CardFormProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const CardFormProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (autofocus != oldProps->autofocus) {
    result["autofocus"] = autofocus;
  }
    
  if (cardStyle != oldProps->cardStyle) {
    result["cardStyle"] = cardStyle;
  }
    
  if (dangerouslyGetFullCardDetails != oldProps->dangerouslyGetFullCardDetails) {
    result["dangerouslyGetFullCardDetails"] = dangerouslyGetFullCardDetails;
  }
    
  if (defaultValues != oldProps->defaultValues) {
    result["defaultValues"] = defaultValues;
  }
    
  if (disabled != oldProps->disabled) {
    result["disabled"] = disabled;
  }
    
  if (placeholders != oldProps->placeholders) {
    result["placeholders"] = placeholders;
  }
    
  if (postalCodeEnabled != oldProps->postalCodeEnabled) {
    result["postalCodeEnabled"] = postalCodeEnabled;
  }
    
  if (preferredNetworks != oldProps->preferredNetworks) {
    result["preferredNetworks"] = toDynamic(preferredNetworks);
  }
  return result;
}
#endif
EmbeddedPaymentElementViewProps::EmbeddedPaymentElementViewProps(
    const PropsParserContext &context,
    const EmbeddedPaymentElementViewProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    configuration(convertRawProp(context, rawProps, "configuration", sourceProps.configuration, {})),
    intentConfiguration(convertRawProp(context, rawProps, "intentConfiguration", sourceProps.intentConfiguration, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName EmbeddedPaymentElementViewProps::getDiffPropsImplementationTarget() const {
  return "EmbeddedPaymentElementView";
}

folly::dynamic EmbeddedPaymentElementViewProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = EmbeddedPaymentElementViewProps();
  const EmbeddedPaymentElementViewProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const EmbeddedPaymentElementViewProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (configuration != oldProps->configuration) {
    result["configuration"] = configuration;
  }
    
  if (intentConfiguration != oldProps->intentConfiguration) {
    result["intentConfiguration"] = intentConfiguration;
  }
  return result;
}
#endif
GooglePayButtonProps::GooglePayButtonProps(
    const PropsParserContext &context,
    const GooglePayButtonProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    type(convertRawProp(context, rawProps, "type", sourceProps.type, {-1})),
    appearance(convertRawProp(context, rawProps, "appearance", sourceProps.appearance, {0})),
    borderRadius(convertRawProp(context, rawProps, "borderRadius", sourceProps.borderRadius, {0})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName GooglePayButtonProps::getDiffPropsImplementationTarget() const {
  return "GooglePayButton";
}

folly::dynamic GooglePayButtonProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = GooglePayButtonProps();
  const GooglePayButtonProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const GooglePayButtonProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (type != oldProps->type) {
    result["type"] = type;
  }
    
  if (appearance != oldProps->appearance) {
    result["appearance"] = appearance;
  }
    
  if (borderRadius != oldProps->borderRadius) {
    result["borderRadius"] = borderRadius;
  }
  return result;
}
#endif
StripeContainerProps::StripeContainerProps(
    const PropsParserContext &context,
    const StripeContainerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    keyboardShouldPersistTaps(convertRawProp(context, rawProps, "keyboardShouldPersistTaps", sourceProps.keyboardShouldPersistTaps, {false})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName StripeContainerProps::getDiffPropsImplementationTarget() const {
  return "StripeContainer";
}

folly::dynamic StripeContainerProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = StripeContainerProps();
  const StripeContainerProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const StripeContainerProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (keyboardShouldPersistTaps != oldProps->keyboardShouldPersistTaps) {
    result["keyboardShouldPersistTaps"] = keyboardShouldPersistTaps;
  }
  return result;
}
#endif

} // namespace facebook::react
